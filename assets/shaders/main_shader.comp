/*********************************************************************
 * file:   main_shader.comp
 * author: aditya.prakash (aditya.prakash@digpen.edu)
 * date:   November 21, 2024
 * Copyright 2024 DigiPen (USA) Corporation.
 *
 * brief:  The main compute shader!
 *********************************************************************/

#version 460

// lower sized workgroup ends up being better for lower instances (?)
#define WORKGROUP_SIZE_X 32
layout(local_size_x = WORKGROUP_SIZE_X) in;

#include "camera_set.glsl"
#include "instance_set.glsl"

struct VkDrawIndexedIndirectCommand {
    uint indexCount;
    uint instanceCount;
    uint firstIndex;
    int  vertexOffset;
    uint firstInstance;
};

// Buffer bindings
layout(std430, set = 2, binding = 0) writeonly buffer SolidDrawCommands {
    VkDrawIndexedIndirectCommand cmds[];
} solidDrawCommands;

layout(std430, set = 2, binding = 1) writeonly buffer WireframeDrawCommands {
    VkDrawIndexedIndirectCommand cmds[];
} wireframeDrawCommands;

layout(std430, set = 2, binding = 2) buffer Counters {
    uint solidDrawCommandCounter;
    uint wireframeDrawCommandCounter;
    uint totalInstances;
};

///*
void main() { 
    uint instanceIndex = gl_GlobalInvocationID.x;
    if (instanceIndex >= totalInstances) return;

    Instance instance = instanceData.instances[instanceIndex];


    uint drawCounter = 0;
    
    vec4 sphere = instance.boundingSphere;
    vec3 center = sphere.xyz;
    float radius = sphere.w;
    bool isText = instanceData.instances[instanceIndex].charIndex != NL_INVALID_FONT_INDEX;

    // Try culling diagetic entities
    if (instance.isDiagetic == 1 && !isText) {
        vec4 clipSpaceCenter = uniforms.projectionView * vec4(center, 1.0);

        // Check if the sphere is behind the near plane (fully behind the camera)
        if (clipSpaceCenter.w < 1e-6) {
            return;
        }

        // Perspective divide (NDC space)
        clipSpaceCenter.xyz /= clipSpaceCenter.w;

        // Check if the sphere is outside the frustum
        float absRadius = radius / abs(clipSpaceCenter.w); // Scale radius to clip space
        bool isOutside = 
            (clipSpaceCenter.x + absRadius < -1.0) || // Left
            (clipSpaceCenter.x - absRadius >  1.0) || // Right
            (clipSpaceCenter.y + absRadius < -1.0) || // Bottom
            (clipSpaceCenter.y - absRadius >  1.0) || // Top
            (clipSpaceCenter.z + absRadius < -1.0) || // Near
            (clipSpaceCenter.z - absRadius >  1.0);   // Far

        if (isOutside)
        {
            return;
	    }
    }

    MeshData data = meshData.meshes[instance.meshIndex];

    VkDrawIndexedIndirectCommand drawCommand;
    drawCommand.indexCount    = data.indexCount;
    drawCommand.instanceCount = 1;
    drawCommand.firstIndex    = data.firstIndex;
    drawCommand.vertexOffset  = data.vertexOffset;
    drawCommand.firstInstance = instanceIndex;

    if (instance.textureIndex != NL_WIREFRAME_TEXTURE_INDEX)
    {
		drawCounter = atomicAdd(solidDrawCommandCounter, 1);
        solidDrawCommands.cmds[drawCounter] = drawCommand;
    }
    else
    {
		drawCounter = atomicAdd(wireframeDrawCommandCounter, 1);
        wireframeDrawCommands.cmds[drawCounter] = drawCommand;
    }
}
//*/

// The version below doesn't cull things properly but is more ideal if it did work
/*
shared VkDrawIndexedIndirectCommand localCommands[WORKGROUP_SIZE_X];
shared uint localIsSolid[WORKGROUP_SIZE_X];
shared uint localIsValid[WORKGROUP_SIZE_X];

void main() {
    uint globalID = gl_GlobalInvocationID.x;
    uint localID = gl_LocalInvocationID.x;
    
    localIsValid[localID] = 0;
    localIsSolid[localID] = 0;

    // Out-of-bounds check
    if (globalID >= totalInstances) {
        localIsValid[localID] = 0;
        return;
    }

    Instance instance = instanceData.instances[globalID];

    // Frustum culling
    vec4 sphere = instance.boundingSphere;
    vec3 center = sphere.xyz;
    float radius = sphere.w;

    vec4 clipSpaceCenter = uniforms.projectionView * vec4(center, 1.0);

    // Check if the sphere is behind the near plane (fully behind the camera)
    if (clipSpaceCenter.w < 1e-6) {
        localIsValid[localID] = 0;
        return;
    }

    // Perspective divide (NDC space)
    clipSpaceCenter.xyz /= clipSpaceCenter.w;

    // Check if the sphere is outside the frustum
    float absRadius = radius / abs(clipSpaceCenter.w); // Scale radius to clip space
    bool isOutside = 
        (clipSpaceCenter.x + absRadius < -1.0) || // Left
        (clipSpaceCenter.x - absRadius >  1.0) || // Right
        (clipSpaceCenter.y + absRadius < -1.0) || // Bottom
        (clipSpaceCenter.y - absRadius >  1.0) || // Top
        (clipSpaceCenter.z + absRadius < -1.0) || // Near
        (clipSpaceCenter.z - absRadius >  1.0);   // Far

    if (isOutside) {
        localIsValid[localID] = 0;
        return;
    }

    // Prepare draw command
    MeshData data = meshData.meshes[instance.meshIndex];
    VkDrawIndexedIndirectCommand drawCommand;
    drawCommand.indexCount    = data.indexCount;
    drawCommand.instanceCount = 1;
    drawCommand.firstIndex    = data.firstIndex;
    drawCommand.vertexOffset  = data.vertexOffset;
    drawCommand.firstInstance = globalID;

    // Store the command and metadata in shared memory
    localCommands[localID] = drawCommand;
    localIsSolid[localID]  = (instance.isWireframe == 0) ? 1 : 0;
    localIsValid[localID]  = 1;

    barrier();

    // Thread 0 collects valid commands and writes them to global memory
    if (localID == 0) {
        uint solidCount = 0;
        uint wireframeCount = 0;

        for (uint i = 0; i < WORKGROUP_SIZE_X; ++i) {
            if (localIsValid[i] == 1) {
                if (localIsSolid[i] == 1) {
                    uint idx = atomicAdd(solidDrawCommandCounter, 1);
                    solidDrawCommands.cmds[idx] = localCommands[i];
                } else {
                    uint idx = atomicAdd(wireframeDrawCommandCounter, 1);
                    wireframeDrawCommands.cmds[idx] = localCommands[i];
                }
            }
        }
    }
}
*/