/*********************************************************************
 * file:   particleSpawner.comp
 * author: aditya.prakash (aditya.prakash@digpen.edu)
 * date:   February 25, 2025
 * Copyright  2024 DigiPen (USA) Corporation.
 *
 * brief:  Spawns Particles
 *********************************************************************/

#version 460

#define WORKGROUP_SIZE_X 1
#define WORKGROUP_SIZE_Y 32
layout(local_size_x = WORKGROUP_SIZE_X, local_size_y = WORKGROUP_SIZE_Y) in;

#include "include/particles.glsl"
#include "include/random.glsl"

layout(std430, set = 2, binding = 5) buffer writeonly ParticleBufferIn {
  Particle particles[NL_MAX_PARTICLES];
} particleBufferIn;

void main()
{
    int numAvailable = particleCounterBuffer.deadParticleCount;
    if (numAvailable == 0) return;

    ParticleEmitter emitter = particleEmitterBuffer.emitters[gl_GlobalInvocationID.x];

    uint batchSize = emitter.spawnCount;
    if (batchSize == 0) return;
    if (gl_GlobalInvocationID.y >= batchSize) return;

    int deadCount = atomicAdd(particleCounterBuffer.deadParticleCount, -1);
    if (deadCount <= 0) { // leq cuz deadCount could go stale
        atomicAdd(particleCounterBuffer.deadParticleCount, 1);
        return;
    }

    uint newParticleIndex = deadListBuffer.deadList[deadCount - 1];

    float startSize = emitter.sizeBegin + (randFloat(newParticleIndex + 4u) * 2.0 - 1.0) * emitter.sizeVariation;
    particleBufferIn.particles[newParticleIndex].posSize = vec4(emitter.position, startSize);
    particleBufferIn.particles[newParticleIndex].velSize = vec4(emitter.velocity + randVec3(newParticleIndex * 5u, emitter.velocityVariation), emitter.sizeEnd);
    particleBufferIn.particles[newParticleIndex].accelSize = vec4(emitter.acceleration + randVec3(newParticleIndex * 8u, emitter.accelerationVariation), startSize);
    particleBufferIn.particles[newParticleIndex].rotLife = vec4(emitter.rotation, emitter.lifetime);
    particleBufferIn.particles[newParticleIndex].angularVelAge = vec4(emitter.angularVelocity + randVec3(newParticleIndex * 11u, emitter.angularVelocityVariation), 0.0);
    particleBufferIn.particles[newParticleIndex].tint = emitter.tint;
    particleBufferIn.particles[newParticleIndex].textureIndex = emitter.textureIndex;
    particleBufferIn.particles[newParticleIndex].modelIndex = emitter.modelIndex;
    particleBufferIn.particles[newParticleIndex].isBillboard = emitter.isBillboard;
    particleBufferIn.particles[newParticleIndex].isDiagetic = emitter.isDiagetic;

    uint aliveIndex = atomicAdd(particleCounterBuffer.aliveParticleCount1, 1);
    aliveList1.indices[aliveIndex] = newParticleIndex;
}