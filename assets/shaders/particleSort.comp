/*********************************************************************
 * file:   particle.comp
 * author: aditya.prakash (aditya.prakash@digpen.edu)
 * date:   November 21, 2024
 * Copyright 2024 DigiPen (USA) Corporation.
 *
 * brief:  The particle compute shader!
 *********************************************************************/

#version 460

#define WORKGROUP_SIZE_X 32
layout(local_size_x = WORKGROUP_SIZE_X) in;

#include "include/instance_set.glsl"

struct ParticleInstance {
  mat4 transformMat;    // 64 bytes
  vec4 textureIndexTint;// 4  bytes
  uint meshIndex;       // 4  bytes
};

layout(std430, set = 1, binding = 2) buffer ParticleInstanceDataBuffer {
  ParticleInstance instances[NL_MAX_PARTICLES];
} particleInstanceData;

layout(std430, set = 2, binding = 4) buffer ParticleCounters {
    uint particleDrawCommandCounter;
    uint totalInstances;
};

struct VertexInstanceData {
    mat4 transform;
    vec4 textureIndexTint;
    vec4 meshIndex;
};

layout(std430, set = 1, binding = 6) buffer VertexInstanceBuffer {
    VertexInstanceData vertexData[NL_MAX_PARTICLES];
} vertexInstanceBuffer;

struct MeshCountData {
  uint meshIndex;
  uint count;
  uint firstInstance;
  uint instanceCounter;
};

layout(std430, set = 1, binding = 5) buffer ParticleCountersBuffer {
  int numEmitters;          // Number of emitters
  int aliveParticleCount1;   // Size of alive list
  int aliveParticleCount2;   // Size of alive list
  int deadParticleCount;    // Size of dead list
  int countAfterSimulation; // Really just for debug purposes
  uint numMeshes;
  MeshCountData meshCounts[NL_MAX_MODELS * NL_MAX_MESHES];
} particleCounterBuffer;

///*
void main() { 
    uint instanceIndex = gl_GlobalInvocationID.x;
    if (instanceIndex >= totalInstances) return;

    ParticleInstance instance = particleInstanceData.instances[instanceIndex];
    uint meshIndex = instance.meshIndex;
    uint newIndex = atomicAdd(particleCounterBuffer.meshCounts[meshIndex].instanceCounter, 1);

    vertexInstanceBuffer.vertexData[newIndex].transform = instance.transformMat;
    vertexInstanceBuffer.vertexData[newIndex].textureIndexTint = instance.textureIndexTint;
    vertexInstanceBuffer.vertexData[newIndex].meshIndex.x = meshIndex;
}