/*********************************************************************
 * file:   particle.comp
 * author: aditya.prakash (aditya.prakash@digpen.edu)
 * date:   November 21, 2024
 * Copyright 2024 DigiPen (USA) Corporation.
 *
 * brief:  The particle compute shader!
 *********************************************************************/

#version 460

#define WORKGROUP_SIZE_X 1
layout(local_size_x = WORKGROUP_SIZE_X) in;

#include "include/instance_set.glsl"

struct VkDrawIndexedIndirectCommand {
    uint indexCount;
    uint instanceCount;
    uint firstIndex;
    int  vertexOffset;
    uint firstInstance;
};

struct ParticleInstance {
  mat4 transformMat;    // 64 bytes
  vec4 textureIndexTint;// 4  bytes
  uint meshIndex;       // 4  bytes
};

layout(std430, set = 1, binding = 2) buffer readonly ParticleInstanceDataBuffer {
  ParticleInstance instances[NL_MAX_PARTICLES];
} particleInstanceData;

layout(std430, set = 2, binding = 3) writeonly buffer ParticleDrawCommands {
    VkDrawIndexedIndirectCommand cmds[];
} particleDrawCommands;

layout(std430, set = 2, binding = 4) buffer ParticleCounters {
    uint particleDrawCommandCounter;
    uint totalInstances;
};

struct MeshCountData {
  uint meshIndex;
  uint count;
  uint firstInstance;
  uint instanceCounter;
};

layout(std430, set = 1, binding = 5) buffer ParticleCountersBuffer {
  int numEmitters;          // Number of emitters
  int aliveParticleCount1;   // Size of alive list
  int aliveParticleCount2;   // Size of alive list
  int deadParticleCount;    // Size of dead list
  int countAfterSimulation; // Really just for debug purposes
  uint numMeshes;
  MeshCountData meshCounts[NL_MAX_MODELS * NL_MAX_MESHES];
} particleCounterBuffer;

///*
void main() { 
    uint meshCount = particleCounterBuffer.meshCounts[gl_GlobalInvocationID.x].count;
    if (meshCount == 0) return;

    uint firstInstance = particleCounterBuffer.meshCounts[gl_GlobalInvocationID.x].firstInstance;
    MeshData data = meshData.meshes[gl_GlobalInvocationID.x];

    VkDrawIndexedIndirectCommand drawCommand;
    drawCommand.indexCount    = data.indexCount;
    drawCommand.instanceCount = meshCount;
    drawCommand.firstIndex    = data.firstIndex;
    drawCommand.vertexOffset  = data.vertexOffset;
    drawCommand.firstInstance = firstInstance;

	uint drawCounter = atomicAdd(particleDrawCommandCounter, 1);
    particleDrawCommands.cmds[drawCounter] = drawCommand;
}